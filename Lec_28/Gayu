#include <iostream>
#include <stdlib.h>

using namespace std;

struct tnode {
    int data;
    struct tnode *right;
    struct tnode *left;
};

struct tnode *CreateBST(struct tnode *root, int item) {
    if (root == NULL) {
        struct tnode *newNode = (struct tnode *)malloc(sizeof(struct tnode));
        newNode->data = item;
        newNode->left = newNode->right = NULL;
        return newNode;
    }

    if (item < root->data)
        root->left = CreateBST(root->left, item);
    else if (item > root->data)
        root->right = CreateBST(root->right, item);

    return root;
}

void Postorder(struct tnode *root) {
    if (root == NULL)
        return;

    Postorder(root->left);
    Postorder(root->right);
    cout << root->data << " ";
}

int main() {
    struct tnode *root = NULL;
    int choice, item, n, i;
    do {
        cin >> choice;
        switch (choice) {
            case 1:
                root = NULL;
                cin >> n;
                for (i = 1; i <= n; i++) {
                    cin >> item;
                    root = CreateBST(root, item);
                }
                cout << "BST with " << n << " nodes (without duplicates) is ready to use!" << "\n";
                break;
            case 2:
                cout << "BST Traversal in POSTORDER" << "\n";
                Postorder(root);
                cout << "\n";
                break;
            case 3:
                exit(0);
                break;
            default:
                cout << "Wrong choice" << "\n";
                break;
        }
    } while (1);
    return 0;
}
